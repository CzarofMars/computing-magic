#+TITLE: Virtual Infinity Systems
#+SUBTITLE: Computing Magic Curriculum
#+OPTIONS: toc:nil 
#+OPTIONS: num:nil

*  Computing Magic Curriculum

** Summary

Go beyond developing computer programs the hard way, i.e. manually. Learn the
most powerful [[https://en.wikipedia.org/wiki/Programming_paradigm][Programming Paradigms]] and how to use [[Https://en.wikipedia.org/wiki/Metaprogramming][Meta-Programming]] to generate
correct-by-construction code from your specifications. Along the way, you will
build a dynamic Web Server with a customizable object-relational database. You
will wind up with l33t computing skills along with an extensible framework which
go well beyond the conventional state of the art - so you can accomplish your
ambitious goals.

** Strategy

1. Start from zero - Beginner's Mind
2. Take the least cluttered and most general path, leveraging
    - https://racket-lang.org/
    - https://www.postgresql.org/
3. Pull in additional resources
4. Architecture - putting it all together!

** Object-Level Plan

Note: The detailed Object-Level Plan is emerging in the [[https://github.com/GregDavidson/computing-magic/blob/main/computing-magic-notes.org][Computing Magic Notes]].
Here is a rough outline.

1. Explore the three short Racket tutorials as a mathematician would, i.e.
  making it your own as you go through the steps:
    - https://docs.racket-lang.org/quick/
    - https://docs.racket-lang.org/continue/index.html
    - https://docs.racket-lang.org/more/index.html
2. Absorb Additional Resources
    - [[https://www.youtube.com/watch?v=6avJHaC3C2U][The Art of Code]]
    - [[https://github.com/GregDavidson/computing-magic/blob/main/cm-distinctions.org][Computing Magic Distinctions]]
    - [[https://github.com/GregDavidson/computing-magic/blob/main/cm-examples.org][Computing Magic Examples]]
    - https://github.com/GregDavidson/on-computing
    - https://github.com/GregDavidson/on-lisp
    - and some others!
3. Learn PostgreSQL
    - https://www.postgresql.org/docs/devel/tutorial.html
4. Learn Meta-PostgreSQL
    - https://gregdavidson.github.io/wicci-core-S0_lib/
5. Putting it all together
    - Separation of Concerns
    - Systems Architecture

** Optional Extension Modules

The core Computing Magic Curriculum above can be extended to give more power in
specialized areas. These extensions are optional - the core curriculum gives
sufficient power for any of these areas to be addressed immediately and
specialized knowledge picked up quickly from books, etc. These extensions are
also modular, e.g. multiple such can be combined.

***  Artificial Intelligence Technologies

- AI Distinctions
- Automated Reasoning
- Combining multiple sources of knowledge

***  Unix/Linux/BSD System Administration & Security

- Shell Wizardry
    - Text Tools
- Systems Distinctions
- Transparent Firewalls
- Freedom Box
- Containers & VMs
- Qubes

***  Systems Programming

- Systems Programming Distinctions
- C & Rust
    - https://github.com/GregDavidson/C-By-Example

** Additional Resources

- Software Tools
    - Bash
    - Git
    - Emacs
    - OrgMode
- Programming Paradigms 
    - https://en.wikipedia.org/wiki/Programming_paradigm
    - Array Paradigm
        - [[https://www.youtube.com/watch?v=a9xAKttWgP4][Life in APL]]
        - https://xpqz.github.io/learnapl/intro.html
    - Object Oriented Paradigm
        - https://pharo.org/
    - Functional Paradigm 
    - Logic and Constraint Paradigms
