* Which Computer Languages Matter?

** Why Some Languages Matter More Than Others
  
Let's use *hack* in the /MIT/ sense, of an ability to bend something to your
will through informed programming. See
- [[http://www.catb.org/esr/jargon/html/H/hacker.html][Jargon: Hacker]]
- [[https://web.archive.org/web/20210812150702/https://hack.org/faq-hacker.html][FAQ: Hacker]]
  
There at least two important reasons to learn a computer language  
- Pragmatic :: It's useful for /hacking/ on important things
- Pedagogical :: Learning it and using it will make you a better /hacker/

In this era of hundreds of useful and interesting languages, we must be even
more discriminating. The languages truly worth our time must be
- Useful :: practically /and/ pedagogically
- Elegant :: minimum complexity and cognitive burden for maximum utility

We can immediately dismiss the [[http://www.paulgraham.com/avg.html][blub languages]] because they lack power and don't
teach us much - indeed, [[https://www.cs.virginia.edu/~evans/cs655/readings/ewd498.html][they can even harm us]] or [[https://nibblestew.blogspot.com/2020/03/its-not-what-programming-languages-do.htmlquality][lead us astray]]! These essays
are old and I'll avoid the mistake of listing today's /blub/ or harmful
languages - they might be languages you currently like! You'll be able to form
your own opinions after gaining experience with some unquestionably excellent
languages.

Can you trust /anyone's/ opinions on the of programming languages? Only when
they have significant experience using it
- the way it was designed to be used
- in ways unanticipated by its designers
Opinions of such experienced experts are well worth listening to!

** Some Languages which Matter, and Why

*** TL;DR

For the more complete list and explanation, see /Key Language Inventory/ below.
 
- [[https://en.wikipedia.org/wiki/Scheme_(programming_language)][Scheme]], inside of [[https://racket-lang.org][Racket]]
      - beginning with [[https://docs.racket-lang.org/quick][graphic arts computing]]
- [[Emacs/elisp-vs-scheme.org][Emacs Lisp]], inside of [[https://www.gnu.org/software/emacs][Emacs]]
      - focused on customizing your tool stack
- [[SQL/SQL-README.org][SQL]], inside of [[https://www.postgresql.org][PostgreSQL]]
      - maximally leveraging the Database
- [[https://duckduckgo.com/?t=ffab&q=posix+shell][Shell]], inside of [[https://www.gnu.org][Gnu/Linux]] or [[https://duckduckgo.com/?t=ffab&q=macintosh+command+line][Mac]] or [[https://docs.microsoft.com/en-us/windows/wsl/about][Windows Subsystem for Linux]]
      - focused on customizing your tool stack
- Web Languages
      - [[https://www.typescriptlang.org][TypeScript]] or [[https://clojurescript.org][ClojureScript]]
      - creating rich and /thin/ front ends
- [[https://en.wikipedia.org/wiki/Category:Logic_programming_languages][Logic]] [[https://en.wikipedia.org/wiki/Constraint_logic_programming][and]] [[https://en.wikipedia.org/wiki/Constraint_programming][Constraint]] Programming
[[https://en.wikipedia.org/wiki/Knowledge-based_systems][- Knowledge-Based]] Programming
 
*** Key Language Inventory

Computer Languages belong to Computer Language Families and are usually
organized around [[https://en.wikipedia.org/wiki/Programming_paradigm][Programming Paradigms]]. Unless there's a pragmatic reason, you
don't need to waste time learning languages which will teach you nothing new.
With experience, you can pick up a language in a familiar family and be
productive in a few hours and masterful in a few days - I stopped counting
languages after I'd used 60 languages for significant projects.

Currently just a list of important languages. More content coming!
 
**** Lisps
- [[https://en.wikipedia.org/wiki/Scheme_(programming_language)][Scheme]]
      - [[https://racket-lang.org][Racket]]
      - [[https://www.gnu.org/software/guile][Guile]]
- [[https://clojure.org][Clojure]]
      - [[https://clojurescript.org][ClojureScript]]
- [[https://en.wikipedia.org/wiki/Common_Lisp][Common Lisp]]
- [[Emacs/elisp-vs-scheme.org][Emacs Lisp]]
**** [[https://en.wikipedia.org/wiki/Category:Logic_programming_languages][Logic]] [[https://en.wikipedia.org/wiki/Constraint_logic_programming][and]] [[https://en.wikipedia.org/wiki/Constraint_programming][Constraint]] Programming
      - [[https://en.wikipedia.org/wiki/Category:Logic_programming_languages][Many Logic-Programming Languages]]
      - [[https://en.wikipedia.org/wiki/SWI-Prolog][SWI-Prolog]] - very popular
      - [[https://en.wikipedia.org/wiki/Ciao_(programming_language)][Ciao Prolog]] - also great for constraint logic programming
      - [[https://en.wikipedia.org/wiki/XSB][XSB Prolog]] - the host of Flora-2
**** [[https://en.wikipedia.org/wiki/Knowledge-based_systems][- Knowledge-Based]] Programming
- Knowledge-Based Logic Programming
- Knowledge-Based Expert Systems
- Great for Hybrid AI
- Combines well with Constraint Logic Programming
- [[https://en.wikipedia.org/wiki/Flora-2][Wikipedia: Flora-2]], [[http://flora.sourceforge.net/][Flora-2 Website]]
**** Systems Programming Languages
- [[https://github.com/GregDavidson/C-By-Example][C]]
- [[https://www.rust-lang.org][Rust]]
**** Relational Programming
- [[SQL/SQL-README.org][SQL]]
**** Amazing Languages
***** Array-Oriented Languages
- APL
- [[https://www.jsoftware.com][J]]
***** Smalltalks
- [[https://squeak.org][Squeak Smalltalk]]
- [[https://pharo.org][Pharo Smalltalk]]
***** Typed Functional Languages
- [[https://www.haskell.org][Haskell]]
**** Web and XML Languages
- JavaScript, TypeScript
      - [[https://clojurescript.org][ClojureScript]]
**** Web and Document Languages
- [[https://en.wikipedia.org/wiki/HTML5][HTML5]] and [[https://html.spec.whatwg.org/multipage/][Related Features]]
- [[https://en.wikipedia.org/wiki/XML][XML]]
      - [[https://en.wikipedia.org/wiki/XHTML][XHTML]]
      - [[https://en.wikipedia.org/wiki/XSLT][XSLT]]
- [[https://orgmode.org][OrgMode]]
**** Shells and [[https://en.wikipedia.org/wiki/Domain-specific_language][DSLs]]
    - =sh=, =bash=, =zsh=
    - Regular Expressions
        - =grep= and much more!
    - =make=, =ed=, =sed=, =awk=
