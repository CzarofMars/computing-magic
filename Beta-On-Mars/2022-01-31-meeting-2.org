* Computing Magic Beta Meeting 2
  
/Tooling Up/

Mars, Monday 24 January 2022

Notes from a [[https://github.com/GregDavidson/computing-magic][Computing Magic]] [[mars-beta-notes.org][Beta Course]] Meeting.

Today we did a partial review of what we've learned from last week's session and
the Quick tutorial. Then we began to discuss the key elements of the software
stack for supporting ambitious projects.

Learning more about appropriate pacing, our [[2022-02-07-meeting-3.org][our next session]] will be a
/creativity lab/.

** 3-Minute Review

Sigh: It took over 30 minutes! :-)
   
*** Lisp uses Nested Lists!
   
- Lisp :: Lots of Irritating Silly Parentheses

Instead of
- a + b + c + d
- Lisp says (+ a b c d)
Instead of
- f(a,b,c) or f(a,g(b,c),d)
- Lisp says (f a b c) or (f a (g b c) d)

Silly? Irritating?

*** Lisp Syntax
   
- Atom :: Anything /NOT/ a /List/
      - Atoms can have structure, e.g. /string/, /array/, /struct/, /picture/, etc.
- Symbolic Expression :: An s-exp is /either/
      - An /Atom/
      - A /List/ of /Symbolic Expressions/
   
*** Lisp Semantics: Eval, Apply

Evaluation takes place within an environment
- Symbol :: Atoms which can serve as /identifiers/, i.e. names for things
- Value :: An /S-Exp/ which can be returned from a /procedure/
- Binding :: A /symbol/ and a /value/
- An environment is like a dictionary

- Evaluation :: =eval= maps S-Exprs to Values
- Symbols :: evaluate to their values in the environment /or error/
- All other atoms :: Evaluate to themselves
- Lists :: Evaluable Lists are called Forms
      - Evaluate each element of the List (recursively)
            - The first element must evaluate to a procedure (or error)
      - =apply=  the procedure to the other elements as arguments
            - The other elements must be suitable values for the procedure's parameters
- Special Forms :: Handled specially by =eval= and =apply=
- quote :: suppresses evaluation of its argument
- (if /test/ /exp-if-true/ /exp-if-false) :: evaluates only 1 of its arguments
- (lambda parameters body) :: creates a procedure

- (P)REPL :: (Prompt) Read Eval Print Loop session
- You enter :: (+ 1 (* 3 4) 5)
- =eval= each element :: returns: ({the addition procedure} 1 12 5)
- =apply= {the addition procedure} to (1 12 5) :: returns: 18

(P)REPL Session
- =(quote (+ 1 (* 3 4) 5))= --> (+ 1 (* 3 4) 5)
- ='(+ 1 (* 3 4) 5)= --> (+ 1 (* 3 4) 5)
- =(apply + '(1 2 3 4 5 6))= --> 21
- =(map eval '(+ 1 (* 3 4) 5))= --> ({the addition procedure} 1 12 5)
  
** After the Quick Tutorial

When you've finished the Quick Tutorial
- study [[file:../Racket/Tutorial-1-Pictures/after-quick.rkt][after-quick.rkt]]
- read the materials in the [[https://github.com/GregDavidson/on-lisp][On Lisp]] repository
- Read the notes from [[2022-01-24-meeting-1.org][our last session]]
  - you'll find a lot of new material there!

Lisp evolves while preserving its essence. 
- It's a language which can serve you forever!

*** Lisp & Scheme Enrichment (Summary)

Lambda is all you need!
- Well, and a few /Special Forms/

Macros give syntactic sugar
- Reader Macros
- Form Macros

** Key Development Tools
   
Consult the notes from the [[https://github.com/GregDavidson/computing-magic/blob/main/Alpha-Course/Meeting-Notes/2021-10-30-meeting.org][Alpha Course Session on Github, Emacs and Orgmode]]!

*** Git, Github
   
Git is eating the world, /resistance is futile!/

If you don't yet have a GitHub account
- [[https://github.com/join][Create a GitHub Account]]

Create some GitHub repositories
- A private repository, suggested name: =Notes=
- A public repository for Computing Magic
- More repositories for your other projects

Clone those repositories onto your working computers 

*** Emacs: Lisp as a Platform 

- Installing Emacs
      - Preludes (see alpha course notes)
- Getting Started with Emacs
      - Pick something you'd like to write up
      - Read up a bit on [[https://orgmode.org][OrgMode]]
      - Do the Emacs Tutorial (COntrol-H t)
      - Create your document using OrgMode in one of your repositories
- Commit your file
      - Try it with basic git commands
      - Try it with =magit= within Emacs
- Make changes and
      - lather, rinse, repeat!

        
** Where do you want to go?

- Direct to Visual Art, Multimedia, Games, etc.?
      - See [[file:2022-01-24-meeting-1.org][last week's notes]]!
      - What support would you like?
- More Computing Magic?
      - Systems Programming
      - Custom Web Servers
      - Database Magic
      - The skills to realize any idea, elegantly!
