* Emacs Notes for Computing Magic

** Why Emacs Matters

Emacs is much more than just a /Text Editor/. Emacs is a platform for doing
creative work as long as the work-flow is based on sort of text or can be
converted to or from a text format.

Text formats include
- Code of nearly every programming language
- Scripts for command tools
- Notations for generating visual art
- Notations for generating music
- HTML, CSS, Javascript
- EMail formats
- Document Markup Languages
- and /much more!/

All of these things can be intelligently managed by Emacs under the control of
collections of Lisp functions. Vast amounts of such collections, called
/packages/ have been written by others and are freely available. You can augment
and/or replace any of those functions to customize Emacs to your will. Emacs is
a platform which can be infinitely customized and extended.

While some other tools and platforms have some of these characteristics, Emacs
is more complete and flexible than any other currently available system. Emacs
can work with more Languages and practices than any other editor or development
platform.

*** Emacs Downsides

Emacs has an old-fashioned design and is based on an old-fashioned dialect of
Lisp. It would be nice to bring these things up to date, but because of the vast
amount of work which has gone into creating smart Emacs packages, Emacs resists
radical change. Instead, its design slowly evolves over time, accommodating new
capabilities while maintaining compatibility with the past.

Learning Emacs takes awhile as you gradually learn how Emacs works and how to
exploit its power.

*** Some Background
**** Keyboards and Modifier Keys

Emacs was invented to be the Editor for [[https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory#Project_MAC][Project MAC]] (Machine Aided Cognition) at
the [[https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory][MIT AI Lab]]. They were /all about/ Computing Magic, i.e. smart machines
running on (for the time) advanced computers assisting humans with demanding
cognitive tasks (such as programming) by automating the boring parts. Their
computers and workstations were really cool, including their keyboards.

Check out [[https://en.wikipedia.org/wiki/Space-cadet_keyboard][The Space-Cadet Keyboard]]: bring up the full-sized picture and look at
the modifier keys at the bottom. The Space-Cadet Keyboard has 5 modifier keys:
Shift, Control, Meta, Super, Hyper.

The idea of modifier keys is that you can use them in conjuction with a mnemonic
letter key to carry out operations, e.g. *Meta-F* for =forward-word=.

Modern keyboards have *Shift* and *Control* but don't have *Meta*, *Super* or
*Hyper*. How can we adapt Emacs to modern keyboards?

1. We can map *Meta* to *Alt*.
2. We can use /prefix keys/ to compensate for missing dedicated modifier keys

Here are the conventions for Gnu Emacs on a typical PC Keyboard:

    - Control :: for character-level operations
    - Meta ::  (usually Alt) for operations on larger syntactic units
    - Control-X Prefix :: for system operations, e.g. files
    - Control-C Prefix :: for local mode operations
    - Control-H Prefix :: for Help functions

There are some examples below.

Note that you can use multiple modifier keys together, including SPACEBAR, so
you could use, e.g. C-M-S-k (Control + Meta + Space + k) as a shortcut for
=kill-with-nuclear-missile=!

You can also customize and extend your keyboard's modifier keys
- [[https://irreal.org/blog/?p=6645][Adding Hyper and Super Keys for Emacs]]
    - Read if on a Mac or if you have typing issues
 
**** Gestures call Lisp Functions
Emacs is a big bag of Lisp Functions.
- Meta-x :: Call a Lisp Function by name (with completion)
Keymaps bind shortcuts to functions
- Control-F :: =forward-char= move /point/ forward by =n= characters
- Meta-F :: =forward-word= move /point/ forward by =n= words
- Control-Meta-F :: =forward-sexp= move /point/ forward by =n= symbolic expressions

You can add your own /lisp functions/, /keymaps/ and /shortcuts/! I'll add some
examples of that later.

**** Emacs terminology is archaic but precise

- Buffers :: Hold your Bytes - /usually/ Text
    - /Buffers/ can be associated with /Files/ or /Processes/
    - Files and Processes can be /local/ or /remote/!
- Windows :: Display buffer contents for users
- Frames :: Hold /Windows/ on /Window Systems/
    -  /Frames/ are what most people would now call /Windows/
    -  /Windows/ are what some people would now call /Window Panes/

Part of why we don't just use the "modern" terms is because Emacs is perfectly
happy to run without a graphics display, yet it still will provide us with
windows!

     
** Emacs + StarterKit + Orgmode
   
**** Emacs Starter Kits

You don't have to build a nice Emacs environment from scratch!
- [[http://www.gnu.org/software/emacs/][Standard GNU Emacs]] <-- start with this
- [[https://www.emacswiki.org/emacs/StarterKits][Emacs Starter Kits]] <-- add one of these
- Suggested Starter Kits:
      - [[https://github.com/bbatsov/prelude][Prelude: Powerful but modest]]
      - [[https://github.com/hlissner/doom-emacs][Doom: Somewhat modest and possibly Evil]]
      - [[https://www.spacemacs.org][Spacemacs: Ambitious and possibly Evil]]

**** Best Emacs Feature: OrgMode

/OrgMode/ is unbelievably awesome.
- Really, you won't believe it,
- until you've discovered it for yourself!

There are /lots/ of good tutorials and videos for the many, many things you can
do with OrgMode.

-[[https://orgmode.org/][ Org Mode: Your life in plain text]]

Suggestion: Start keeping all of your notes and resources using Emacs Orgmode.
